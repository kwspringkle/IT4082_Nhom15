import Citizen from '../model/Citizen.js';
import Household from '../model/Household.js';
import mongoose from 'mongoose';
import History from '../model/History.js';

export const getAllCitizens = async (req, res) => {
  try {
    const { householdId } = req.query;

    const matchConditions = {
      status: { $in: ['Th∆∞·ªùng tr√∫', 'T·∫°m v·∫Øng'] }
    };

    if (householdId) {
      matchConditions.householdId = new mongoose.Types.ObjectId(householdId);
    }

    const pipeline = [
      { $match: matchConditions },
      {
        $lookup: {
          from: 'households',
          localField: 'householdId',
          foreignField: '_id',
          as: 'household',
        },
      },
      {
        $unwind: {
          path: '$household',
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $addFields: {
          statusOrder: {
            $switch: {
              branches: [
                { case: { $eq: ['$status', 'Th∆∞·ªùng tr√∫'] }, then: 1 },
                { case: { $eq: ['$status', 'T·∫°m v·∫Øng'] }, then: 2 },
                { case: { $eq: ['$status', 'ƒê√£ chuy·ªÉn ƒëi'] }, then: 3 },
              ],
              default: 4,
            },
          },
        },
      },
      {
        $project: {
          _id: 1,
          name: 1,
          citizenId: 1,
          gender: 1,
          dob: 1,
          relation: 1,
          householdId: 1,
          apartment: '$household.apartment',
          status: 1,
          statusOrder: 1,
        },
      },
      {
        $sort: {
          statusOrder: 1,
          apartment: 1,
        },
      },
    ];

    const result = await Citizen.aggregate(pipeline);

    res.json(result);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
};

// L·∫•y chi ti·∫øt nh√¢n kh·∫©u theo ID
export const getCitizenById = async (req, res) => {
  try {
    const citizen = await Citizen.findById(req.params.id).populate('householdId');
    if (!citizen) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y nh√¢n kh·∫©u' });
    }
    res.json(citizen);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
};

// Th√™m m·ªõi nh√¢n kh·∫©u
export const createCitizen = async (req, res) => {
  try {
    const {
      name,
      citizenId,
      gender,
      dob,
      relation,
      householdId,
      phone, // ‚Üê L·∫•y th√™m phone t·ª´ body
    } = req.body;

    // T·∫°o nh√¢n kh·∫©u m·ªõi
    const newCitizen = new Citizen({
      name,
      citizenId,
      gender,
      dob,
      relation,
      householdId,
      phone, // ‚Üê Th√™m phone v√†o Citizen
    });

    const savedCitizen = await newCitizen.save();
    console.log("‚úÖ Th√™m nh√¢n kh·∫©u:", name);

    let updatedHousehold;

    if (relation === "Ch·ªß h·ªô") {
      // N·∫øu l√† Ch·ªß h·ªô th√¨ c·∫≠p nh·∫≠t t√™n + phone + tƒÉng members
      updatedHousehold = await Household.findByIdAndUpdate(
        householdId,
        {
          head: name,
          phone: phone, // ‚Üê C·∫≠p nh·∫≠t phone cho household
          $inc: { members: 1 },
          updatedAt: Date.now(),
        },
        { new: true }
      );
    } else {
      // N·∫øu kh√¥ng ph·∫£i ch·ªß h·ªô th√¨ ch·ªâ tƒÉng members
      updatedHousehold = await Household.findByIdAndUpdate(
        householdId,
        {
          $inc: { members: 1 },
          updatedAt: Date.now(),
        },
        { new: true }
      );
    }

    if (!updatedHousehold) {
      return res.status(404).json({
        message: "Kh√¥ng t√¨m th·∫•y h·ªô kh·∫©u ƒë·ªÉ c·∫≠p nh·∫≠t",
      });
    }

    return res.status(201).json({
      message: "Th√™m nh√¢n kh·∫©u th√†nh c√¥ng v√† c·∫≠p nh·∫≠t h·ªô kh·∫©u",
      data: savedCitizen,
      household: updatedHousehold,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi th√™m nh√¢n kh·∫©u:", error);
    res.status(500).json({
      message: "L·ªói m√°y ch·ªß khi th√™m nh√¢n kh·∫©u",
      error: error.message || "Kh√¥ng x√°c ƒë·ªãnh",
    });
  }
};



// C·∫≠p nh·∫≠t nh√¢n kh·∫©u
export const updateCitizen = async (req, res) => {
  try {
    const { name, citizenId, gender, dob, apartment, relation, status, householdId } = req.body;

    const updatedCitizen = await Citizen.findByIdAndUpdate(
      req.params.id,
      { name, citizenId, gender, dob, apartment, relation, status, householdId },
      {
        new: true,
        context: { userId: req.user?.id || 'unknown' }  // üëà Truy·ªÅn userId v√†o ƒë·ªÉ log
      }
    );

    if (!updatedCitizen) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y nh√¢n kh·∫©u' });
    }

    res.json({ message: 'C·∫≠p nh·∫≠t nh√¢n kh·∫©u th√†nh c√¥ng', data: updatedCitizen });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
};



// X√≥a nh√¢n kh·∫©u
export const deleteCitizen = async (req, res) => {
  try {
    const deletedCitizen = await Citizen.findByIdAndDelete(req.params.id);

    if (!deletedCitizen) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y nh√¢n kh·∫©u' });
    }

    // üëá Ghi log th·ªß c√¥ng v√†o History
    await History.create({
      collectionName: 'Citizen',
      documentId: deletedCitizen._id,
      operation: 'delete',
      modifiedBy: req.user?.id || 'unknown',
      changes: { deletedData: deletedCitizen.toObject() }
    });

    res.json({ message: 'X√≥a nh√¢n kh·∫©u th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
};

