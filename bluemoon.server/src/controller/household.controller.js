import Household from '../model/Household.js';
import Payment from '../model/Payment.js';
import Citizen from '../model/Citizen.js';
import History from '../model/History.js';

// L·∫•y t·∫•t c·∫£ h·ªô kh·∫©u (kh√¥ng populate user)
export const getAllHouseholds = async (req, res) => {
  try {
    const households = await Household.find().sort({ apartment: 1 }); // S·∫Øp x·∫øp tƒÉng d·∫ßn theo apartment
    res.status(200).json({
      success: true,
      data: households,
      message: 'L·∫•y danh s√°ch h·ªô kh·∫©u th√†nh c√¥ng',
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch h·ªô kh·∫©u',
      error: error.message,
    });
  }
};


// L·∫•y chi ti·∫øt 1 h·ªô kh·∫©u theo ID
export const getHouseholdById = async (req, res) => {
  try {
    const household = await Household.findById(req.params.id).populate('userId', 'username email');
    if (!household) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y h·ªô kh·∫©u'
      });
    }
    res.status(200).json({
      success: true,
      data: household,
      message: 'L·∫•y chi ti·∫øt h·ªô kh·∫©u th√†nh c√¥ng'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y chi ti·∫øt h·ªô kh·∫©u',
      error: error.message
    });
  }
};

// T·∫°o m·ªõi h·ªô kh·∫©u
export const createHousehold = async (req, res) => {
  try {
    const { apartment, floor, area, head, phone } = req.body;

    if (!req.user || !req.user.id) {
      return res.status(401).json({
        success: false,
        message: "Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c ng∆∞·ªùi d√πng",
      });
    }

    const userId = req.user.id;

    // Ch·ªâ b·∫Øt bu·ªôc 3 tr∆∞·ªùng apartment, floor, area
    if (!apartment || !floor || !area) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: apartment, floor ho·∫∑c area',
      });
    }

    // Chuy·ªÉn floor v√† area v·ªÅ s·ªë n·∫øu c·∫ßn
    const floorNum = parseInt(floor);
    const areaNum = parseFloat(area);

    if (isNaN(floorNum) || floorNum <= 0) {
      return res.status(400).json({
        success: false,
        message: 'T·∫ßng ph·∫£i l√† s·ªë d∆∞∆°ng',
      });
    }

    if (isNaN(areaNum) || areaNum <= 0) {
      return res.status(400).json({
        success: false,
        message: 'Di·ªán t√≠ch ph·∫£i l√† s·ªë d∆∞∆°ng',
      });
    }

    // N·∫øu c√≥ phone th√¨ ki·ªÉm tra ƒë·ªãnh d·∫°ng
    if (phone && !/^0\d{9}$/.test(phone)) {
      return res.status(400).json({
        success: false,
        message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† 10 s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng 0',
      });
    }

    const newHousehold = new Household({
      apartment,
      floor: floorNum,
      area: areaNum,
      head: head || "",  // n·∫øu kh√¥ng truy·ªÅn th√¨ m·∫∑c ƒë·ªãnh chu·ªói r·ªóng
      phone: phone || "",
    });

    const savedHousehold = await newHousehold.save();
    console.log("‚úÖ H·ªô kh·∫©u ƒë√£ l∆∞u:", savedHousehold);

    res.status(201).json({
      success: true,
      data: savedHousehold,
      message: 'T·∫°o h·ªô kh·∫©u th√†nh c√¥ng',
    });

  } catch (error) {
    console.error("üî• L·ªói khi t·∫°o h·ªô kh·∫©u:", error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi t·∫°o h·ªô kh·∫©u',
      error: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
    });
  }
};

// C·∫≠p nh·∫≠t h·ªô kh·∫©u
export const updateHousehold = async (req, res) => {
  try {
    const { apartment, floor, area, head, phone, members } = req.body;

    const updatedData = {};
    if (apartment !== undefined) updatedData.apartment = apartment;
    if (floor !== undefined) updatedData.floor = floor;
    if (area !== undefined) updatedData.area = area;
    if (head !== undefined) updatedData.head = head;
    if (phone !== undefined) updatedData.phone = phone;
    if (members !== undefined) updatedData.members = members;

    updatedData.updatedAt = Date.now();

    const updatedHousehold = await Household.findOneAndUpdate(
      { _id: req.params.id },
      updatedData,
      {
        new: true,
        context: { userId: req.user?.id || 'unknown' } // ‚úÖ ƒë·ªÉ middleware bi·∫øt ai c·∫≠p nh·∫≠t
      }
    );

    if (!updatedHousehold) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y h·ªô kh·∫©u'
      });
    }

    return res.status(200).json({
      success: true,
      data: updatedHousehold,
      message: 'C·∫≠p nh·∫≠t h·ªô kh·∫©u th√†nh c√¥ng'
    });
  } catch (error) {
    console.error("Error in updateHousehold:", error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t h·ªô kh·∫©u',
      error: error.message
    });
  }
};



// X√≥a h·ªô kh·∫©u
// X√≥a h·ªô kh·∫©u (reset th√¥ng tin)
export const deleteHousehold = async (req, res) => {
  try {
    const { id } = req.params;

    const updatedHousehold = await Household.findOneAndUpdate(
      { _id: id },
      {
        head: "",
        phone: "",
        members: 0,
        updatedAt: Date.now(),
      },
      {
        new: true,
        context: { userId: req.user?.id || 'unknown' } // ‚úÖ ƒë·ªÉ middleware log l·∫°i
      }
    );

    if (!updatedHousehold) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y h·ªô kh·∫©u" });
    }

    const updatedCitizens = await Citizen.updateMany(
      { householdId: id },
      { $set: { status: "ƒê√£ chuy·ªÉn ƒëi" } }
    );

    return res.status(200).json({
      success: true,
      data: updatedHousehold,
      updatedCitizensCount: updatedCitizens.modifiedCount,
      message: "ƒê·∫∑t l·∫°i th√¥ng tin h·ªô kh·∫©u th√†nh c√¥ng v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i nh√¢n kh·∫©u"
    });
  } catch (error) {
    console.error("Error in deleteHousehold:", error);
    return res.status(500).json({ success: false, message: "L·ªói khi ƒë·∫∑t l·∫°i th√¥ng tin h·ªô kh·∫©u", error: error.message });
  }
};


// L·∫•y danh s√°ch kho·∫£n n·ªôp c·ªßa m·ªôt h·ªô kh·∫©u
export const getPaymentsByHousehold = async (req, res) => {
  try {
    const householdId = req.params.id;
    const payments = await Payment.find({ householdId }).populate('feeId', 'name type');
    
    // map l·∫°i ƒë·ªÉ d·ªÖ d√πng
    const result = payments.map(p => ({
      id: p._id,
      householdId: p.householdId,
      feeId: p.feeId._id,
      feeName: p.feeId.name,
      feeType: p.feeId.type,
      amount: p.amount,
      dueDate: p.dueDate,
      status: p.status,
      paidDate: p.paidDate,
      paidAmount: p.paidAmount,
      note: p.note,
      createdAt: p.createdAt,
      updatedAt: p.updatedAt
    }));

    res.status(200).json({
      success: true,
      data: result,
      message: 'L·∫•y danh s√°ch kho·∫£n n·ªôp c·ªßa h·ªô th√†nh c√¥ng'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch kho·∫£n n·ªôp c·ªßa h·ªô',
      error: error.message
    });
  }
};
